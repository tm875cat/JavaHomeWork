1.請利用多執行緒(multi-thread)來完成第三隻小豬和大野狼的故事。可利用join()、sleep()、例外處理來完成程式流程。
(a) 請撰寫Pig類別(Class)，實作(implements)Runnable介面(interface)，用來描述小豬視角的故事:
	(1) 印出"小豬: 看到大野狼爬煙囪"
	(2) 印出"小豬: 就在壁爐燒了一鍋水"
	(3) 印出"2分鐘 4分鐘 6分鐘 8分鐘 10分鐘"，要求: 於同一行並間隔1秒鐘再呈現一個分鐘
	(4) 印出"小豬: 一鍋煮沸的水煮好了"
(b) 請撰寫Wolf類別，實作Runnable介面，用來描述大野狼視角的故事:
	(1) 印出"大野狼: 對著第三隻小豬的房子吹氣"
	(2) 印出"大野狼: 不停地吹氣"
	(3) 印出"大野狼: 還是吹不倒"
	(4) 印出"大野狼: 很生氣"
	(5) 印出"大野狼: 決定要從煙囪爬進小豬家"
(c) 請撰寫Narration(旁白)類別，實作Runnable介面，用來描述故事結局:
	(1) 印出"3分鐘 6分鐘 9分鐘 12分鐘 15分鐘"，要求: 於同一行並間隔1秒鐘再呈現一個分鐘
	(2) 印出"旁白: 大野狼爬上煙囪"
	(3) 印出"旁白: 大野狼從煙囪滑進房子"
	(4) 印出"旁白: 就被小豬煮好的滾水燙死了"
劇本要求: 大野狼必須先決定要從煙囪爬進小豬家，小豬才看到大野狼爬煙囪開始煮水，再輪到旁白收尾。參考結果如下:
大野狼: 對著第三隻小豬的房子吹氣
大野狼: 不停地吹氣
大野狼: 還是吹不倒
大野狼: 很生氣
大野狼: 決定要從煙囪爬進小豬家
小豬: 看到大野狼爬煙囪
小豬: 就在壁爐燒了一鍋水
2分鐘 4分鐘 6分鐘 8分鐘 10分鐘 
小豬: 一鍋煮沸的水煮好了
3分鐘 6分鐘 9分鐘 12分鐘 15分鐘 
旁白: 大野狼爬上煙囪
旁白: 大野狼從煙囪滑進房子
旁白: 就被小豬煮好的滾水燙死了


2.完成課堂練習，可利用join()、sleep()、synchronized、Math.random完成
	(a) 選寫MotherBank類別，
		(1) 類別中要有一int屬性(field): money用以紀錄戶頭還有多少錢(初始值200)
		(2) 並有兩個方法(method): saveMoney(String name)存錢、takeMoney(String name)領錢
		(3) 呼叫存錢時固定將money + 100，之後印出"name存錢，目前戶頭有money"。
		(4) 呼叫領錢時固定將money - 120，領錢的當下若money少於120時歸0，之後印出"name領錢，目前戶頭剩money"。
		(5) 要求: 同一支方法不可以同時被呼叫，即有學生在領錢時其他學生不可以同時領錢；存錢亦同。
	(b) 撰寫Student類別，繼承Thread，
		(1) 類別中要有一String屬性: name用以記錄學生姓名、有一MotherBank屬性: motherBank用以操作戶頭
		(2) 有一個方法: deal()交易，呼叫時請隨機執行motherBank的存錢或領錢，共10次。每次執行完畢後休息1秒再執行下一次。
		(3) 並有一建構子(constructor)用以在創建Student物件時給name、motherBank賦值。
		(4) Override run()，於run()中呼叫deal()。
	(c) 於main方法中
		(1) 產生MotherBank物件
		(2) 產生兩個Student物件: 小明、小華，並給予(1)產生的motherBank物件
		(3) 執行小明和小華
		(4) 待小明和小華交易完畢，印出"戶頭最終餘額: money"
		
		
3.請將第二題中的Student類別增加String engName英文名字、String studentId學號屬性，並於main中產生以下三個物件並加入List<Student>中: 
	Student("小明", "David", "001")
	Student("小美", "Amy", "003")
	Student("小華", "David", "002")
	(a) 以list.forEach()印出"學號: studentId, 姓名: name, 英文名字: engName"
	(b) 以list.sort()排序，先以英文名字由小到大排，再以學號由大到小排。排完後再以forEach印出結果
	(c) 以list.stream().filter()找出學號大於等於002的學生。再以forEach印出結果
	(d) 以list.stream().map()產生List<String> nameList的姓名串列。再以forEach印出結果。
//進度
package test3;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;

public class Student {
    // 請將第二題中的Student類別增加String engName英文名字、String
    // studentId學號屬性，並於main中產生以下三個物件並加入List<Student>中:
    // Student("小明", "David", "001")
    // Student("小美", "Amy", "003")
    // Student("小華", "David", "002")
    // (a) 以list.forEach()印出"學號: studentId, 姓名: name, 英文名字: engName"
    // (b) 以list.sort()排序，先以英文名字由小到大排，再以學號由大到小排。排完後再以forEach印出結果
    // (c) 以list.stream().filter()找出學號大於等於002的學生。再以forEach印出結果
    // (d) 以list.stream().map()產生List<String> nameList的姓名串列。再以forEach印出結果。
    private String name;
    private String engName;
    private String studentId;

    public Student(String name, String engName, String studentId) {
        this.name = name;
        this.engName = engName;
        this.studentId = studentId;
    }

    public String getName() {
        return name;
    }

    public String getEngName() {
        return engName;
    }

    public String getStudentId() {
        return studentId;
    }

    public static void main(String[] args) {
        List<Student> students = new ArrayList<>();
        students.add(new Student("小明", "David", "001"));
        students.add(new Student("小美", "Amy", "003"));
        students.add(new Student("小華", "David", "002"));
        // (a) 以list.forEach()印出"學號: studentId, 姓名: name, 英文名字: engName"
        System.out.println("forEach()");
        for (Student student : students) {
            System.out.print("學號:" + student.getStudentId() + ",姓名:" + student.getName() + ",英文名字:" + student.getEngName() + "\n");
        }
        System.out.println("sort()");
        // (b) 以list.sort()排序，先以英文名字由小到大排，再以學號由大到小排。排完後再以forEach印出結果

//        humans.sort(
//                (Human h1, Human h2) -> h1.getName().compareTo(h2.getName()));
//
    }
}










//進度
	
	
		
